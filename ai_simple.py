#!/usr/bin/env python3

"""
Simple AI Automation Example
Basic example using Ollama to generate content and automate Notepad
"""

import asyncio
import terminator
import ollama

async def ai_generated_notepad_demo():
    """Simple demo: AI generates text, we type it in Notepad"""
    print("ü§ñ Simple AI + Automation Demo")
    print("="*40)
    
    try:
        # Generate content with AI
        print("üß† Asking AI to write a fun story...")
        
        prompt = """Write a short, fun story (max 150 words) about a friendly robot that loves to help people with computer tasks. Make it cheerful and simple."""
        
        response = ollama.chat(model='llama3.2', messages=[
            {'role': 'user', 'content': prompt}
        ])
        
        ai_story = response['message']['content']
        print("‚úì AI has written a story!")
        
        # Now automate Notepad to type the story
        print("\nüìù Opening Notepad and typing the AI story...")
        
        desktop = terminator.Desktop()
        desktop.open_application('notepad')
        await asyncio.sleep(2)
        
        editor = desktop.locator('name:Edit')
        
        # Create a nice formatted document
        document = f"""AI-Generated Story
{'='*30}

{ai_story}

{'='*30}
Generated by: Local AI (Ollama)
Typed by: Terminator SDK automation
Date: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

This story was written by AI and typed automatically! ü§ñ‚ú®
"""
        
        editor.type_text(document)
        print("‚úì Story typed in Notepad!")
        
        print("\nüéâ Demo completed! Check your Notepad window!")
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        print("\nMake sure you have:")
        print("1. Ollama installed and running: 'ollama serve'")
        print("2. Llama model downloaded: 'ollama pull llama3.2'")

async def ai_calculator_helper():
    """AI suggests math problems and we solve them"""
    print("\nüßÆ AI Calculator Helper Demo")
    print("="*40)
    
    try:
        # Ask AI for math problems
        print("üß† Asking AI for interesting math problems...")
        
        prompt = """Give me 2 simple but interesting math problems that would be good for a calculator demo. Just give me the math expressions, like "25*4" or "100-37", one per line. Keep them simple."""
        
        response = ollama.chat(model='llama3.2', messages=[
            {'role': 'user', 'content': prompt}
        ])
        
        ai_response = response['message']['content']
        print(f"‚úì AI suggested: {ai_response}")
        
        # Extract numbers and operations (simple parsing)
        import re
        expressions = re.findall(r'\d+[\+\-\*/]\d+', ai_response)
        
        if not expressions:
            # Fallback if parsing fails
            expressions = ["25*4", "100-37"]
        
        print(f"üìä Found expressions: {expressions}")
        
        # Open calculator and solve them
        print("\nüî¢ Solving AI-suggested problems...")
        
        desktop = terminator.Desktop()
        desktop.open_application('calc')
        await asyncio.sleep(2)
        
        for i, expr in enumerate(expressions[:2], 1):  # Limit to 2 problems
            print(f"  Problem {i}: {expr}")
            
            # Clear calculator
            try:
                clear_btn = desktop.locator('name:Clear')
                clear_btn.click()
                await asyncio.sleep(0.3)
            except:
                pass
            
            # Input the expression
            for char in expr:
                if char.isdigit():
                    btn = desktop.locator(f'name:{char}')
                    btn.click()
                elif char == '+':
                    btn = desktop.locator('name:Plus')
                    btn.click()
                elif char == '-':
                    btn = desktop.locator('name:Minus')
                    btn.click()
                elif char == '*':
                    btn = desktop.locator('name:Multiply by')
                    btn.click()
                elif char == '/':
                    btn = desktop.locator('name:Divide by')
                    btn.click()
                
                await asyncio.sleep(0.2)
            
            # Get result
            equals_btn = desktop.locator('name:Equals')
            equals_btn.click()
            await asyncio.sleep(1)
            
            print(f"  ‚úì Solved: {expr}")
        
        print("üéâ All AI-suggested problems solved!")
        
    except Exception as e:
        print(f"‚ùå Calculator demo failed: {e}")

async def main():
    """Run both simple demos"""
    print("ü§ñ SIMPLE AI AUTOMATION DEMOS")
    print("="*50)
    print("Using Ollama + Terminator SDK")
    print("="*50)
    
    # Demo 1: AI story in Notepad
    await ai_generated_notepad_demo()
    
    await asyncio.sleep(3)
    
    # Demo 2: AI calculator helper
    await ai_calculator_helper()
    
    print("\n" + "="*50)
    print("üéä ALL DEMOS COMPLETED!")
    print("="*50)
    print("\nWhat happened:")
    print("‚Ä¢ AI wrote a creative story ‚Üí automatically typed in Notepad")
    print("‚Ä¢ AI suggested math problems ‚Üí automatically solved in Calculator")
    print("\nThis shows how AI can generate tasks for automation! üöÄ")

if __name__ == "__main__":
    asyncio.run(main()) 